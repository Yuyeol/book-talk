generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  nickname      String?
  bio           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  tags          Tag[]
  memos         Memo[]
  friendsTo     User[]    @relation("Friendship")
  friendsBy     User[]    @relation("Friendship")
  comments      Comment[]
  likes         Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  author      String?
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  finishedAt  DateTime?
  memos       Memo[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tags        Tag[]     @relation("BookTags")

  @@index([userId])
}

model Memo {
  id        Int       @id @default(autoincrement())
  content   String
  page      Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  likes     Like[]

  @@index([bookId])
  @@index([userId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  memo      Memo      @relation(fields: [memoId], references: [id], onDelete: Cascade)
  memoId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([memoId])
  @@index([userId])
}

model Like {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  memo      Memo      @relation(fields: [memoId], references: [id], onDelete: Cascade)
  memoId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([memoId])
  @@index([userId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  bgColor   String
  txtColor  String
  createdAt DateTime @default(now())
  books     Book[]   @relation("BookTags")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}
