generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Book          Book[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  author      String?
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  finishedAt  DateTime?
  Tags        Tag[]
  Memos       Memo[]
  User        User      @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
}

model Memo {
  id        Int       @id @default(autoincrement())
  content   String
  page      Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  book      Book?     @relation(fields: [bookId], references: [id])
  bookId    Int?

  @@index([bookId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  bgColor   String
  txtColor  String
  createdAt DateTime @default(now())
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?

  @@index([bookId])
}
